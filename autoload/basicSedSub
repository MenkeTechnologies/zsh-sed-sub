# -*- mode: sh -*-
# vim: set ft=sh:

basicSedSub(){
    emulate -LR zsh

    local sedArg key orig replace

    if test -z "$BUFFER" || [[ "$BUFFER" == [[:space:]]# ]]; then
        zle up-line-or-history
    fi

    printf "\x1b[1;34m"
    zle -R "Zsh-BsS: Extended Regex Sed Substitution (original>replaced): "
    printf "\x1b[1;44;37m"
    read -k key
    local -r start=$key

    while (( (#key) != (##\n) && (#key) != (##\r) )) ; do

        if (( (#key) == (##\e) ));then
            printf "\x1b[0m"
            return 1
        fi

        if (( (#key) == (##\>) ));then
            printf "\x1b[0;4;1;34m"
        else
            printf "\x1b[1;44;37m"
            if [[ "$sedArg" == *'>'* ]]; then
                printf "\x1b[0;1;37;45m"
            fi
        fi

        if (( (#key) == (##^?) || (#key) == (##^h) ));then
            sedArg=${sedArg[1,-2]}
            printf "\x1b[0m"
        elif (( (#key) == (##^U) ));then
            sedArg=""
            printf "\x1b[0m"
        else
            sedArg="${sedArg}$key"
        fi

        zle -R "Zsh-BsS: Extended Regex Sed Substitution (original>replaced): $sedArg"
        read -k key || return 1

    done

    if [[ "$sedArg" != *'>'* ]]; then
        printf "\x1b[0;1;31m"
        zle -R  "Zsh-BsS: Needed '>' for separation of original regex string and substitution!" && read -k 1
        printf "\x1b[0m"
        return 1
    fi

    orig="${sedArg%%>*}"
    replace="${sedArg##*>}"
    orig="${orig//@/\\@}"
    replace="${replace//@/\\@}"
    sedArg="s@$orig@$replace@g"

    if [[ "$BUFFER" != *"$orig"* ]]; then
        printf "\x1b[0;1;31m"
        zle -R  "Zsh-BsS: No Match." && read -k 1
        printf "\x1b[0m"
        return 1
    fi

    printf "\x1b[0m"
    BUFFER="$(print -r -- $BUFFER | sed -E -- "$sedArg")"
}

basicSedSub "$@"
